<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[聊聊算法复杂度o(1), o(n), o(logn), o(nlogn)]]></title>
    <url>%2F2019%2F05%2F05%2F%E8%81%8A%E8%81%8A%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;在描述算法复杂度时,经常用到o(1), o(n), o(logn), o(nlogn)来表示对应算法的时间复杂度, 这里进行归纳一下它们代表的含义:这是算法的时空复杂度的表示。不仅仅用于表示时间复杂度，也用于表示空间复杂度。&#160; &#160; &#160; &#160;O后面的括号中有一个函数，指明某个算法的耗时/耗空间与数据增长量之间的关系。其中的n代表输入数据的量。&#160; &#160; &#160; &#160;比如时间复杂度为O(n)，就代表数据量增大几倍，耗时也增大几倍。比如常见的遍历算法。&#160; &#160; &#160; &#160;再比如时间复杂度O(n^2)，就代表数据量增大n倍时，耗时增大n的平方倍，这是比线性更高的时间复杂度。比如冒泡排序，就是典型的O(n^2)的算法，对n个数排序，需要扫描n×n次。&#160; &#160; &#160; &#160;再比如O(logn)，当数据增大n倍时，耗时增大logn倍（这里的log是以2为底的，比如，当数据增大256倍时，耗时只增大8倍，是比线性还要低的时间复杂度）。二分查找就是O(logn)的算法，每找一次排除一半的可能，256个数据中查找只要找8次就可以找到目标。&#160; &#160; &#160; &#160;O(nlogn)同理，就是n乘以logn，当数据增大256倍时，耗时增大256*8=2048倍。这个复杂度高于线性低于平方。归并排序就是O(nlogn)的时间复杂度。&#160; &#160; &#160; &#160;O(1)就是最低的时空复杂度了，也就是耗时/耗空间与输入数据大小无关，无论输入数据增大多少倍，耗时/耗空间都不变。 哈希算法就是典型的O(1)时间复杂度，无论数据规模多大，都可以在一次计算后找到目标（不考虑冲突的话） 本文作者：娄梦轩本文地址： https://sunnylou.github.io/2019/05/05/聊聊算法复杂度/ 版权声明：本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 CN 许可协议。转载请注明出处！]]></content>
      <tags>
        <tag>技术</tag>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 本文作者：娄梦轩本文地址： https://sunnylou.github.io/2019/05/05/hello-world/ 版权声明：本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 CN 许可协议。转载请注明出处！]]></content>
  </entry>
  <entry>
    <title><![CDATA[随笔]]></title>
    <url>%2F2019%2F04%2F12%2F%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[-Be the friend you wish you had.不论你想拥有什么样的朋友，自己先努力做到，比如我希望可以有这样的朋友：某些方面很优秀，可以指点我对生活、工作有见解，可以帮我分析问题、启发我努力朝这个方向发展。- 你花六块八买个便当吃，觉得很节省，有人在路边买了七毛钱馒头吞咽后步履匆匆；你八点起床看书，觉得很勤奋，上微博发现曾经的同学八点就已经在面对繁重的工作；你周六补个课，觉得很累，打个电话才知道许多朋友都连续加班了一个月。亲爱的，你真的还不够苦，不够勤奋和努力。 坚持做自己懒得做但正确的事情，就能得到别人想得到却得不到的东西。 静心，不要迷失在短期的快感 一个人时间用在哪儿，成就就在哪儿 什么东西是与城市、公司背景无关的？个人品牌、技术能力、视野，人脉的话，最好是与地域无关，可以将来提供帮助的 劳动不能创造财富，财富是通过交换来创造的。 他会依据价值性去衡量自己要不要去做，却从来不问自己是否想去做。他说，“更高的平台，不能做到，就是一个失败者”。很多时候，他太压榨自己了，他觉得很累，压力太大，他原来不幸福的。他只是活在了别人艳羡的眼光中，用自己做过的不平凡的成绩累积成为自己进入名企的垫脚石。 -在传达/转述一个观点时先思考一下： 这个信息是谁发出的 怎么传播到我这里的 目标群体是谁、目的是什么 论点是什么、论据够不够 要不要相信。 而不是完全地吸收。 - 本文作者：娄梦轩本文地址： https://sunnylou.github.io/2019/04/12/随笔/ 版权声明：本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 CN 许可协议。转载请注明出处！]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聊聊系统稳定性的几个9]]></title>
    <url>%2F2019%2F04%2F12%2F%E8%81%8A%E8%81%8A%E7%B3%BB%E7%BB%9F%E7%A8%B3%E5%AE%9A%E6%80%A7%E7%9A%84%E5%87%A0%E4%B8%AA9%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;在软件系统的高可靠性（也称为可用性，英文描述为HA，High Available）里有个衡量其可靠性的标准——X个9，这个X是代表数字3~5。X个9表示在软件系统1年时间的使用过程中，系统可以正常使用时间与总时间（1年）之比，我们通过下面的计算来感受下X个9在不同级别的可靠性差异。 3个9：(1-99.9%)*365*24=8.76小时，表示该软件系统在连续运行1年时间里最多可能的业务中断时间是8.76小时。 4个9：(1-99.99%)*365*24=0.876小时=52.6分钟，表示该软件系统在连续运行1年时间里最多可能的业务中断时间是52.6分钟。 5个9：(1-99.999%)*365*24*60=5.26分钟，表示该软件系统在连续运行1年时间里最多可能的业务中断时间是5.26分钟。那么X个9里的X只代表数字3~5，为什么没有1~2，也没有大于6的呢？我们接着往下计算： 1个9：(1-90%)*365=36.5天 2个9：(1-99%)*365=3.65天 6个9：(1-99.9999%)*365*24*60*60=31秒 &#160; &#160; &#160; &#160;可以看到1个9和、2个9分别表示一年时间内业务可能中断的时间是36.5天、3.65天，这种级别的可靠性或许还不配使用“可靠性”这个词；而6个9则表示一年内业务中断时间最多是31秒，那么这个级别的可靠性并非实现不了，而是要做到从5个9》6个9的可靠性提升的话，后者需要付出比前者几倍的成本，所以在企业里大家都只谈（3~5）个9。 本文作者：娄梦轩本文地址： https://sunnylou.github.io/2019/04/12/聊聊系统稳定性的几个9/ 版权声明：本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 CN 许可协议。转载请注明出处！]]></content>
      <tags>
        <tag>技术</tag>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http 1.1 短连接双方均可主动关闭]]></title>
    <url>%2F2019%2F04%2F12%2Fhttp-1-1-%E7%9F%AD%E8%BF%9E%E6%8E%A5%E5%8F%8C%E6%96%B9%E5%9D%87%E5%8F%AF%E4%B8%BB%E5%8A%A8%E5%85%B3%E9%97%AD%2F</url>
    <content type="text"><![CDATA[connection section URL：https://tools.ietf.org/html/rfc2616#section-14.10 connection section内容：12HTTP/1.1 defines the &quot;close&quot; connection option for the sender to signal that the connection will be closed after completion of the response. For example: Connection: close &#160; &#160; &#160; &#160;即双方都可以关闭。 “HTTP: The Definitive Guide” 也是这样表述的。 实际上，在 “HTTP: The Definitive Guide” （英文版）p85 中讨论了一模一样的关于 TIME_WAIT 的问题。基本结论是：这个 TIME_WAIT 在 benchmark 的情况下会影响同一台 client 可以发起的请求数量；在实际应用中几乎没有问题。Server 保持 TIME_WAIT 并不是保持 socket，而只是保持一个记录，表示“对应这两个 end-point 的 packet 应该丢弃”，仅此而已。 本文作者：娄梦轩本文地址： https://sunnylou.github.io/2019/04/12/http-1-1-短连接双方均可主动关闭/ 版权声明：本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 CN 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聊聊QPS/TPS/并发量/系统吞吐量的概念]]></title>
    <url>%2F2019%2F04%2F12%2F%E8%81%8A%E8%81%8AQPS-TPS-%E5%B9%B6%E5%8F%91%E9%87%8F-%E7%B3%BB%E7%BB%9F%E5%90%9E%E5%90%90%E9%87%8F%E7%9A%84%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;我们在日常工作中经常会听到QPS/TPS这些名词，也会经常被别人问起说你的系统吞吐量有多大。这个问题从业务上来讲，可以理解为应用系统每秒钟最大能接受的用户访问量。或者每秒钟最大能处理的请求数； QPS:每秒钟处理完请求的次数；注意这里是处理完。具体是指发出请求到服务器处理完成功返回结果。可以理解在server中有个counter，每处理一个请求加1，1秒后counter=QPS。 TPS：每秒钟处理完的事务次数，一般TPS是对整个系统来讲的。一个应用系统1s能完成多少事务处理，一个事务在分布式处理中，可能会对应多个请求，对于衡量单个接口服务的处理能力，用QPS比较多。 并发量：系统能同时处理的请求数 RT：响应时间，处理一次请求所需要的平均处理时间 计算关系：QPS = 并发量 / 平均响应时间并发量 = QPS * 平均响应时间 本文作者：娄梦轩本文地址： https://sunnylou.github.io/2019/04/12/聊聊QPS-TPS-并发量-系统吞吐量的概念/ 版权声明：本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 CN 许可协议。转载请注明出处！]]></content>
      <tags>
        <tag>并发</tag>
        <tag>吞吐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Work for yourself]]></title>
    <url>%2F2019%2F04%2F12%2FWork-for-yourself%2F</url>
    <content type="text"><![CDATA[&#160; &#160; &#160; &#160;为自己工作。不是为父母，不是为同事，不是为公司，不是为项目，不是为绩效。几年以后你离开，项目的成就属于公司，绩效已是过往云烟，你获得了收入，公司得到了效益。一身行囊离开的时候，除了一些积蓄，就是你的经历，你的态度，你的身体，还有，你的技术。 &#160; &#160; &#160; &#160;可能有的人要说，我就想找个地方混一混。其实，一个公司大了以后，也一定有地方可以混，我也管不了每一个人。但是，我在互联网行业里干了十多年，看到了很多Loser。他们都是太聪明，把自己混失败了。大家一定要记住，混日子就是在浪费自己的时间。想一想，你35岁以后还能混么？那个时候会有更多的年轻人，他们比你更努力，比你更能干，要求也比你低。你要是没学到东西，没锻炼出来能力，他们会代替你的。能力是不能混出来的，而是学习出来的，是锻炼出来的。结果，你在企业里只把年龄混大了，能力没有提升，那么你人生道路会越来越窄，也丧失了你最好的学习机会。 &#160; &#160; &#160; &#160;所以，如果你不喜欢360，你一定要尽快换，尽快找到自己喜欢的事情，找到一个值得自己去投入的事情，至少你不会浪费自己的生命。如果你选择360，仅仅是因为公司的名气，就想混，吃亏的是你自己。想想，你再能混，能混我多少钱啊？你一年混我20万，5年一&gt;共也才混我100万啊，这对我来说没什么，但是你在这里白搭了自己5年的时间。你5年的青春值多少钱？难道只有100万吗？ –红衣教主周鸿祎 本文作者：娄梦轩本文地址： https://sunnylou.github.io/2019/04/12/Work-for-yourself/ 版权声明：本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 CN 许可协议。转载请注明出处！]]></content>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中文技术文档的写作规范]]></title>
    <url>%2F2019%2F04%2F11%2F%E4%B8%AD%E6%96%87%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E7%9A%84%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[标题层级标题分为四级。 一级标题：文章的标题 二级标题：文章主要部分的大标题 三级标题：二级标题下面一级的小标题 四级标题：三级标题下面某一方面的小标题 原则 一级标题下，不能直接出现三级标题。 标题要避免孤立编号（即同级标题只有一个）。 下级标题不重复上一级标题的内容。 谨慎使用四级标题，尽量避免出现，保持层级的简单和防止出现过于复杂的章节。如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。 文本字间距全角中文字符与半角英文字符之间，应有一个半角空格。 错误：本文介绍如何快速启动Windows系统。 正确：本文介绍如何快速启动 Windows 系统。 全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。 正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。 正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。 半角的百分号，视同阿拉伯数字。 英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。 错误：一部容量为 16 GB 的智能手机 正确：一部容量为 16GB 的智能手机 半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。 错误：他的电脑是 MacBook Air 。 正确：他的电脑是 MacBook Air。 句子 避免使用长句。一个句子建议不超过 100 字或者正文的 3 行。 尽量使用简单句和并列句，避免使用复合句。 写作风格尽量不使用被动语态，改为使用主动语态。 错误：假如此软件尚未被安装， 正确：假如尚未安装这个软件， 不使用非正式的语言风格。 错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！ 正确：无法参加本次活动，我深感遗憾。 用对“的”、“地”、“得”。 她露出了开心的笑容。（形容词＋的＋名词） 她开心地笑了。（副词＋地＋动词） 她笑得很开心。（动词＋得＋副词） 使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。 错误：从管理系统可以监视中继系统和受其直接控制的分配系统。 正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。 名词前不要使用过多的形容词。 错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。 正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。 单个句子的长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。 错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。 正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。 同样一个意思，尽量使用肯定句表达，不使用否定句表达。 错误：请确认没有接通装置的电源。 正确：请确认装置的电源已关闭。 避免使用双重否定句。 错误：没有删除权限的用户，不能删除此文件。 正确：用户必须拥有删除权限，才能删除此文件。 英文处理英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。 英文：⋯information stored in random access memory (RAMs)⋯ 中文：……存储在随机存取存储器（RAM）里的信息…… 外文缩写可以使用半角圆点(.)表示缩写。U.S.A.Apple, Inc. 表示中文时，英文省略号（⋯）应改为中文省略号（……）。英文：5 minutes later⋯中文：5 分钟过去了⋯⋯ 英文书名或电影名改用中文表达时，双引号应改为书名号。英文：He published an article entitled “The Future of the Aviation”. 中文：他发表了一篇名为《航空业的未来》的文章。第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。 专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。 “American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。 “online transaction processing”（在线事务处理）不是专有名词，不应大写。 段落原则 一个段落只能有一个主题，或一个中心句子。 段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。 一个段落的长度不能超过七行，最佳段落长度小于等于四行。 段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。 段落之间使用一个空行隔开。 段落开头不要留出空白字符。 引用引用第三方内容时，应注明出处。One man’s constant is another man’s variable. — Alan Perlis 如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。本文转载自 WikiQuote使用外部图片时，必须在图片下方或文末标明来源。本文部分图片来自 Wikipedia 数值半角数字数字一律使用半角形式，不得使用全角形式。错误： 这件商品的价格是１０００元。正确： 这件商品的价格是 1000 元。 千分号数值为千位以上，应添加千分号（半角逗号）。 XXX 公司的实收资本为 RMB1,258,000。 对于 4 ～ 6 位的数值，千分号是选用的，比如1000和1,000都可以接受。对于7位及以上的数值，千分号是必须的。 多位小数要从小数点后从左向右添加千分号，比如4.234,345。货币 货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。 $1,0001,000 美元 数值范围表示数值范围时，用～连接。参见《标点符号》一节的“连接号”部分。带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。错误：132～234kg正确：132kg～234kg 错误：67～89%正确：67%～89% 变化程度的表示法数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。 增加到过去的两倍（过去为一，现在为二）增加了两倍（过去为一，现在为三）数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。 降低到百分之八十（定额是一百，现在是八十）降低了百分之八十（原来是一百，现在是二十）不能用“降低N倍”或“减少N倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。 标点符号原则 中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。 如果整句为英文，则该句使用英文/半角标点。 句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。 句号中文语句中的结尾处应该用全角句号（。）。 句子末尾用括号加注时，句号应在括号之外。 错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。 逗号逗号，表示句子内部的一般性停顿。 注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。 顿号句子内部的并列词，应该用全角顿号(、) 分隔，而不用逗号，即使并列词是英语也是如此。 错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。 英文句子中，并列词语之间使用半角逗号（,）分隔。例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components. 分号分号；表示复句内部并列分句之间的停顿。 引号引用时，应该使用全角双引号（“ ”），注意前后双引号不同。例句：许多人都认为客户服务的核心是“友好”和“专业”。引号里面还要用引号时，外面一层用双引号，里面一层用单引号（‘ ’），注意前后单引号不同。 例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。” 圆括号补充说明时，使用全角圆括号（），括号前后不加空格。 例句：请确认所有的连接（电缆和接插件）均安装牢固。 冒号全角冒号（：）常用在需要解释的词语后边，引出解释和说明。例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。 表示时间时，应使用半角冒号（:）。例句：早上 8:00 省略号省略号……表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用。。。或…等非标准形式。 省略号不应与“等”这个词一起使用。错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……正确：我们为会餐准备了香蕉、苹果、梨等各色水果。 感叹号应该使用平静的语气叙述，尽量避免使用感叹号！。不得多个感叹号连用，比如！！和!!!。 破折号破折号————一般用于做进一步解释。破折号应占两个汉字的位置。例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。 连接号连接号用于连接两个类似的词。以下场合应该使用直线连接号（-），占一个半角字符的位置。 两个名词的复合 图表编号例句：氧化-还原反应例句：图 1-1以下场合应该使用波浪连接号（～），占一个全角字符的位置。 数值范围（例如日期、时间或数字）例句：2009 年～2011 年注意，波浪连接号前后两个值都应该加上单位。波浪连接号也可以用汉字“至”代替。例句：周围温度：-20°C 至 -10°C 文档体系结构软件手册是一部完整的书，建议采用下面的结构。 简介（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明 快速上手（Getting Started）：[可选] [文件] 如何最快速地使用产品 入门篇（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程 环境准备（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件 安装（Installation）：[可选] [文件] 软件的安装方法 设置（Configuration）：[必备] [文件] 软件的设置 进阶篇（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程 API（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍 FAQ：[可选] [文件] 常见问题解答 附录（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容 Glossary：[可选] [文件] 名词解释 Recipes：[可选] [文件] 最佳实践 Troubleshooting：[可选] [文件] 故障处理 ChangeLog：[可选] [文件] 版本说明 Feedback：[可选] [文件] 反馈方式下面是两个真实范例，可参考。 Redux 手册 Atom 手册文件名文档的文件名不得含有空格。文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。错误： 名词解释.md正确： glossary.md文件名建议只使用小写字母，不使用大写字母。错误：TroubleShooting.md正确：troubleshooting.md为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。文件名包含多个单词时，单词之间建议使用半角的连词线（-）分隔。不佳：advanced_usage.md 正确：advanced-usage.md 参考链接 产品手册中文写作规范, by 华为 写作规范和格式规范, by DaoCloud 技术写作技巧在日汉翻译中的应用, by 刘方 简体中文规范指南, by lengoo 文档风格指南, by LeanCloud 豌豆荚文案风格指南, by 豌豆荚 中文文案排版指北, by sparanoid 中文排版需求, by W3C 为什么文件名要小写？, by 阮一峰 本文作者：娄梦轩本文地址： https://sunnylou.github.io/2019/04/11/中文技术文档的写作规范/ 版权声明：本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 CN 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>文档</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>文档</tag>
      </tags>
  </entry>
</search>
